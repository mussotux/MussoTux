/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RegisterPanel.java
 *
 * Created on Jan 8, 2012, 9:57:13 AM
 */
package ui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Window;
import java.io.IOException;
import java.net.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

//package com.smartgwt.sample.showcase.client;
/**
 *
 * @author xnimbus
 */
public class RegisterPanel extends javax.swing.JPanel {

    String firstName, lastName, userName, password, passwordConfirm, email, recMessage;
    int pane;
    JFrame successFrame;

    /**
     * Creates new form RegisterPanel
     */
    public RegisterPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPasswordField1 = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        firstNameField = new javax.swing.JTextField();
        lastNameField = new javax.swing.JTextField();
        userNameField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        passwordConfirmField = new javax.swing.JPasswordField();
        emailField = new javax.swing.JTextField();
        registerButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        alertLabel = new javax.swing.JLabel();
        alertPasswordLabel = new javax.swing.JLabel();
        informationLabel = new javax.swing.JLabel();
        alertEmailLabel = new javax.swing.JLabel();
        alertFirstNameLabel = new javax.swing.JLabel();
        alertPasswordLabel1 = new javax.swing.JLabel();
        alertLastNameLabel = new javax.swing.JLabel();
        alertUserNameLabel = new javax.swing.JLabel();

        jPasswordField1.setText("jPasswordField1");

        jLabel1.setText("FirstName");

        jLabel4.setText("LastName");

        jLabel5.setText("Email");

        jLabel6.setText("UserName");

        jLabel7.setText("ConfirmPassword");

        jLabel8.setText("Password");

        firstNameField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                firstNameFieldFocusLost(evt);
            }
        });

        lastNameField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                lastNameFieldFocusLost(evt);
            }
        });

        userNameField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                userNameFieldFocusLost(evt);
            }
        });

        passwordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });
        passwordField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                passwordFieldFocusLost(evt);
            }
        });

        passwordConfirmField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                passwordConfirmFieldFocusLost(evt);
            }
        });

        emailField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                emailFieldFocusLost(evt);
            }
        });

        registerButton.setText("Register");
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        alertPasswordLabel.setForeground(new java.awt.Color(23, 11, 11));

        alertEmailLabel.setForeground(new java.awt.Color(29, 17, 17));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel8)
                            .addComponent(jLabel5))
                        .addGap(64, 64, 64)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(emailField)
                            .addComponent(lastNameField)
                            .addComponent(firstNameField)
                            .addComponent(passwordField)
                            .addComponent(userNameField)
                            .addComponent(passwordConfirmField)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(informationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 3, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(alertEmailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(alertPasswordLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                            .addComponent(alertFirstNameLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(alertPasswordLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(alertLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(alertLastNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alertUserNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43))
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(registerButton)
                .addGap(107, 107, 107)
                .addComponent(cancelButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(220, 220, 220)
                        .addComponent(alertLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(alertFirstNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(alertLastNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(alertUserNameLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel6)
                                .addComponent(userNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(alertPasswordLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel7)
                            .addComponent(passwordConfirmField)
                            .addComponent(alertPasswordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(alertEmailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registerButton)
                    .addComponent(cancelButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addComponent(informationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed
        // TODO add your handling code here:


        firstName = firstNameField.getText();
        lastName = lastNameField.getText();
        userName = userNameField.getText();
        password = new String(passwordField.getPassword());
        passwordConfirm = new String(passwordConfirmField.getPassword());
        email = emailField.getText();

        //LastName checked when registerButton is clicked
        validLastName();


        //FirstName checked when registerButton is clicked
        validFirstNames();

        //Email Condition
        validEmail();

        //UserName checked when registerButton is clicked
        ValidUserName();
        //passwords and passwordconfirm condition
        validPassword();

        //is password and confirmpassword field matched ??
        isPasswordMatch();
        if (validate(firstName) && validate(lastName) && !userName.equals("") && isPasswordValid(password) && isPasswordValid(passwordConfirm) == true && isEmailValid(email) == true && validate(firstName)) {

            DatagramSocket socket;
            DatagramPacket packet, receivePacket;

            InetAddress address = null;

            try {
                socket = new DatagramSocket();
                try {
                    address = InetAddress.getByName("localhost");
//                   address=InetAddress.getByAddress(String "dipak", "10.42.43.26";


                } catch (UnknownHostException ex) {
                    ex.printStackTrace();
                }
                int portNumber = 4011;
                String mess = firstName + '&' + lastName + '&' + userName + '&' + password + '&' + email;
                byte message[] = mess.getBytes();
                packet = new DatagramPacket(message, message.length, address, portNumber);

                try {
                    socket.send(packet);
                    System.out.println("packet sending");
                } catch (IOException ex) {
                    ex.printStackTrace();
                }

                String message1 = "abcdefg";
                byte test1[] = message1.getBytes();
                receivePacket = new DatagramPacket(test1, test1.length);
                try {
                    socket.receive(receivePacket);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                recMessage = new String(receivePacket.getData());
                System.out.println("" + recMessage + "\n");

            } catch (SocketException e) {
                e.printStackTrace();
            }

            //If register successful go here
            if (recMessage.equalsIgnoreCase("success")) {
                Object[] options = {"OK"};
                pane = JOptionPane.showOptionDialog(null, "Register Successful, Click Ok To Login.......", "Successful Frame", JOptionPane.OK_OPTION,
                        JOptionPane.PLAIN_MESSAGE, null, options, null);

                //on okButton and close button clicked, chilPanel close and return to MainFrame
                if ((pane == JOptionPane.OK_OPTION) || pane == JOptionPane.CLOSED_OPTION) {
                    Window win = SwingUtilities.getWindowAncestor((Component) evt.getSource());
                    win.dispose();
                }


            } else {
                informationLabel.setText("Entered value are not correct or may be empty");
                informationLabel.setForeground(Color.RED);
            }

        } else {
            informationLabel.setText("Entered value are not correct or may be empty");
            informationLabel.setForeground(Color.RED);
        }
    }//GEN-LAST:event_registerButtonActionPerformed

    private void passwordConfirmFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordConfirmFieldFocusLost
        // TODO add your handling code here:
        isPasswordMatch();
    }//GEN-LAST:event_passwordConfirmFieldFocusLost

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:

        Window win = SwingUtilities.getWindowAncestor((Component) evt.getSource());
        win.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void emailFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_emailFieldFocusLost
        // TODO add your handling code here:
        validEmail();
    }//GEN-LAST:event_emailFieldFocusLost

    private void firstNameFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_firstNameFieldFocusLost
        // TODO add your handling code here:
        validFirstNames();
    }//GEN-LAST:event_firstNameFieldFocusLost

    private void lastNameFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lastNameFieldFocusLost
        // TODO add your handling code here:
        validLastName();
    }//GEN-LAST:event_lastNameFieldFocusLost

    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordFieldActionPerformed

    private void passwordFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordFieldFocusLost
        // TODO add your handling code here:
        validPassword();

    }//GEN-LAST:event_passwordFieldFocusLost

    private void userNameFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_userNameFieldFocusLost
        // TODO add your handling code here:
        ValidUserName();
    }//GEN-LAST:event_userNameFieldFocusLost
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel alertEmailLabel;
    private javax.swing.JLabel alertFirstNameLabel;
    private javax.swing.JLabel alertLabel;
    private javax.swing.JLabel alertLastNameLabel;
    public javax.swing.JLabel alertPasswordLabel;
    private javax.swing.JLabel alertPasswordLabel1;
    private javax.swing.JLabel alertUserNameLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField emailField;
    private javax.swing.JTextField firstNameField;
    private javax.swing.JLabel informationLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JTextField lastNameField;
    private javax.swing.JPasswordField passwordConfirmField;
    private javax.swing.JPasswordField passwordField;
    public javax.swing.JButton registerButton;
    private javax.swing.JTextField userNameField;
    // End of variables declaration//GEN-END:variables

    public static boolean isEmailValid(String email) {
        boolean isValid = false;
        String expression = "^[\\w\\.-]+@([\\w\\-]+\\.)+[A-Z]{2,4}$";
        CharSequence inputStr = email;
        Pattern pattern = Pattern.compile(expression, Pattern.CASE_INSENSITIVE);
        Matcher matcher = pattern.matcher(inputStr);
        if (matcher.matches()) {
            isValid = true;

        }
        return isValid;
    }

    public static boolean validate(String name) {

        boolean isValid = false;

        String expression = "^[a-zA-Z]{2,30}$";
        CharSequence inputStr = name;
        Pattern pattern = Pattern.compile(expression, Pattern.CASE_INSENSITIVE);
        Matcher matcher = pattern.matcher(inputStr);
        if (matcher.matches()) {
            isValid = true;




        }
        return isValid;

    }

    public static boolean isUserNameValid(String name) {

        boolean isValid = false;

//        String expression = "^[a-zA-Z]{2,30}$";
        String expression = "^[a-zA-Z0-9.-]{2,4}$";
        CharSequence inputStr = name;
        Pattern pattern = Pattern.compile(expression, Pattern.CASE_INSENSITIVE);
        Matcher matcher = pattern.matcher(inputStr);
        if (matcher.matches()) {
            isValid = true;
        }
        return isValid;
    }

    public static boolean isPasswordValid(String password) {
        boolean isValid = false;
        String expression = "((?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,})";

        CharSequence inputStr = password;
        Pattern pattern = Pattern.compile(expression, Pattern.CASE_INSENSITIVE);
        Matcher matcher = pattern.matcher(inputStr);
        if (matcher.matches()) {
            isValid = true;

        }
        return isValid;
    }

    public void validEmail() {
        email = emailField.getText();
        isEmailValid(email);
        if (isEmailValid(email) == true && !email.equals("")) {
            ImageIcon icon = new ImageIcon("images/correctIcon.png");
            alertEmailLabel.setIcon(icon);
        }
        if (isEmailValid(email) == false) {
            if (email.equals("")) {
                ImageIcon icon = new ImageIcon("images/wrongIcon.png");
                alertEmailLabel.setIcon(icon);
            } else {
                ImageIcon icon = new ImageIcon("images/wrongIcon.png");
                alertEmailLabel.setIcon(icon);
            }


        }



    }

    public void validFirstNames() {
        firstName = firstNameField.getText();
        isUserNameValid(firstName);
        if (isUserNameValid(firstName) == true) {
            ImageIcon icon = new ImageIcon("images/correctIcon.png");
            alertFirstNameLabel.setIcon(icon);
        }
        if (isUserNameValid(firstName) != true) {
            if (firstName.equals("")) {
                ImageIcon icon = new ImageIcon("images/wrongIcon.png");
                alertFirstNameLabel.setIcon(icon);

            } else {
                ImageIcon icon = new ImageIcon("images/wrongIcon.png");
                alertFirstNameLabel.setIcon(icon);
            }
            ImageIcon icon = new ImageIcon("images/wrongIcon.png");
            alertFirstNameLabel.setIcon(icon);
        }

    }

    public void validLastName() {
        lastName = lastNameField.getText();
        validate(lastName);
        if (validate(firstName) == true) {
            ImageIcon icon = new ImageIcon("images/correctIcon.png");
            alertLastNameLabel.setIcon(icon);
        }
        if (validate(lastName) != true) {
            if (lastName.equals("")) {
                ImageIcon icon = new ImageIcon("images/wrongIcon.png");
                alertLastNameLabel.setIcon(icon);

            } else {
                ImageIcon icon = new ImageIcon("images/wrongIcon.png");
                alertLastNameLabel.setIcon(icon);
            }
        }

    }

    public void ValidUserName() {
        userName = userNameField.getText();
        isUserNameValid(userName);
        if (validate(userName) == true) {
            ImageIcon icon = new ImageIcon("images/correctIcon.png");
            alertUserNameLabel.setIcon(icon);
        }
        if (validate(userName) != true) {
            if (userName.equals("")) {
                ImageIcon icon = new ImageIcon("images/wrongIcon.png");
                alertUserNameLabel.setIcon(icon);

            } else {
                ImageIcon icon = new ImageIcon("images/wrongIcon.png");
                alertUserNameLabel.setIcon(icon);
            }
        }


    }

    private void validPassword() {
        password = new String(passwordField.getPassword());
        if (isPasswordValid(password) == true) {
            ImageIcon icon = new ImageIcon("images/correctIcon.png");
            alertPasswordLabel1.setIcon(icon);
        }
        if (isPasswordValid(password) != true) {
            if (password.equals("")) {
                ImageIcon icon = new ImageIcon("images/wrongIcon.png");
                alertPasswordLabel1.setIcon(icon);

            } else {
                ImageIcon icon = new ImageIcon("images/wrongIcon.png");
                alertPasswordLabel1.setIcon(icon);

            }

        }

    }

    private void isPasswordMatch() {
        password = new String(passwordField.getPassword());
        passwordConfirm = new String(passwordConfirmField.getPassword());
        System.out.println(password + "   " + passwordConfirm);
        if (password.equals(passwordConfirm) && isPasswordValid(password) == true && isPasswordValid(passwordConfirm) == true) {
            ImageIcon icon = new ImageIcon("images/correctIcon.png");
            alertPasswordLabel.setIcon(icon);



        } else {
            ImageIcon icon = new ImageIcon("images/wrongIcon.png");
            alertPasswordLabel.setIcon(icon);

        }
        if (password.equals("") && passwordConfirm.equals("")) {
            ImageIcon icon = new ImageIcon("images/wrongIcon.png");
            alertPasswordLabel.setIcon(icon);

        }

    }
}
