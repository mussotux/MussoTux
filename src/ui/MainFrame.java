/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.io.*;
import java.net.InetAddress;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author munnaraju
 */
public class MainFrame extends javax.swing.JFrame {

    JFrame registerFrame;
    InetAddress address;
    int serverPort = 4041;
    String userName, password;
    static Socket client;
    OutputStream outToServer;
    static DataOutputStream out;
    //static ObjectOutputStream out;
    ChatPanel cp;
    InputStream inFromServer;
    static DataInputStream in;
   // static ObjectInputStream in;
    static String datas;
    static String dataString;
    PrintWriter pw = null;
    byte[] buf;
    int actualNumberOfBytesRead;
    private int home =0;
    Image image;
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
       


    }

  

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        registerLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        userNameField = new javax.swing.JTextField();
        alertUserNameLabel = new javax.swing.JLabel();
        alertPasswordLabel = new javax.swing.JLabel();
        loginButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        registerLabel.setText("Register new account, Click here");
        registerLabel.setFocusCycleRoot(true);
        registerLabel.setFocusTraversalPolicyProvider(true);
        registerLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                registerLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                registerLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                registerLabelMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                registerLabelMousePressed(evt);
            }
        });
        registerLabel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                registerLabelMouseMoved(evt);
            }
        });
        registerLabel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                registerLabelFocusGained(evt);
            }
        });
        registerLabel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                registerLabelKeyPressed(evt);
            }
        });

        passwordField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                passwordFieldFocusLost(evt);
            }
        });
        passwordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                passwordFieldKeyReleased(evt);
            }
        });

        jLabel1.setText("Username");

        jLabel2.setText("Password");

        userNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userNameFieldActionPerformed(evt);
            }
        });
        userNameField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                userNameFieldFocusLost(evt);
            }
        });
        userNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                userNameFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                userNameFieldKeyReleased(evt);
            }
        });

        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });
        loginButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                loginButtonKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                loginButtonKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap(151, Short.MAX_VALUE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(loginButton)
                        .addGap(106, 106, 106))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(31, 31, 31)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(userNameField)
                            .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(alertPasswordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(alertUserNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(registerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(135, 135, 135))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap(114, Short.MAX_VALUE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(userNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alertUserNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(alertPasswordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addComponent(loginButton)
                .addGap(18, 18, 18)
                .addComponent(registerLabel)
                .addGap(112, 112, 112))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void registerLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_registerLabelMouseClicked
        // TODO add your handling code here:
//        registerFrame = new JFrame();
//        registerFrame.setSize(700, 700);
//        registerFrame.setVisible(true);
//        RegisterPanel panel = new RegisterPanel();
//        registerFrame.getContentPane().add(panel);
//        this.setFocusable(false);
    }//GEN-LAST:event_registerLabelMouseClicked

    private void registerLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_registerLabelMouseExited
        // TODO add your handling code here:
        registerLabel.setForeground(Color.black);
    }//GEN-LAST:event_registerLabelMouseExited

    private void registerLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_registerLabelMouseEntered
        // TODO add your handling code here:
        registerLabel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        registerLabel.setForeground(Color.GREEN);

    }//GEN-LAST:event_registerLabelMouseEntered

    private void registerLabelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_registerLabelMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_registerLabelMouseMoved

    private void registerLabelFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_registerLabelFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_registerLabelFocusGained

    private void registerLabelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_registerLabelKeyPressed
        // TODO add your handling code here:
//        if(evt.getKeyCode()==java.awt.event.KeyEvent.VK_ENTER){
//            System.out.println("enter key is pressed");
//        }
    }//GEN-LAST:event_registerLabelKeyPressed

    private void passwordFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordFieldFocusLost
        // TODO add your handling code here:
        validPassword();
    }//GEN-LAST:event_passwordFieldFocusLost

    private void userNameFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_userNameFieldFocusLost
        // TODO add your handling code here:
        validUserName();
    }//GEN-LAST:event_userNameFieldFocusLost

    private void userNameFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userNameFieldKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_userNameFieldKeyPressed

    private void userNameFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userNameFieldKeyReleased
        // TODO add your handling code here:
        userName = userNameField.getText();
        password = new String(passwordField.getPassword());
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!userName.equals("") && !password.equals("")) {
                loginButtonActionPerformed(null);
            } else {
                JOptionPane.showMessageDialog(rootPane, "Please fill in the required data");
            }
        }


    }//GEN-LAST:event_userNameFieldKeyReleased

    private void passwordFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordFieldKeyReleased
        // TODO add your handling code here:
        userName = userNameField.getText();
        password = new String(passwordField.getPassword());
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!userName.equals("") && !password.equals("")) {
                loginButtonActionPerformed(null);
            } else {
                JOptionPane.showMessageDialog(rootPane, "Please fill in the required data");
            }
        }
    }//GEN-LAST:event_passwordFieldKeyReleased

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        // TODO add your handling code here:
        setOne();
        validUserName();
        validPassword();
        try {
            // TODO add your handling code here:
            userName = userNameField.getText();
            password = new String(passwordField.getPassword());
            address = InetAddress.getByName("localhost");
            //serverPort = 4092;
            if (isUserNameValid(userName) == true && isPasswordValid(password) == true) {
                if (isClientConnected(address, serverPort) == true) {
                    readFromSocket();
                    out.writeUTF(userName + " " + password);
                    out.flush();
                    mainPanel.removeAll();
                    JPanel panel = new JPanel();
                    panel.setSize(700, 700);
                    panel.setVisible(true);
                    setTitle("Home of "+userName);
                    HomePanel hp = new HomePanel(userName);
                    FlowLayout fl = new FlowLayout();
                    fl.setHgap(0);
                    fl.setVgap(0);
                    panel.add(hp);
                    fl.setAlignment(FlowLayout.LEFT);
                    mainPanel.setLayout(fl);
                    mainPanel.add(panel, BorderLayout.SOUTH);
                    mainPanel.revalidate();

                } else {
                    System.out.println("NOT VALIDATED");
                }
            }

        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_loginButtonActionPerformed

    private void loginButtonKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_loginButtonKeyReleased
        // TODO add your handling code here:
        userName = userNameField.getText();
        password = new String(passwordField.getPassword());
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!userName.equals("") && !password.equals("")) {
                loginButtonActionPerformed(null);
            } else {
                JOptionPane.showMessageDialog(rootPane, "Please fill in the required data");
            }
        }
    }//GEN-LAST:event_loginButtonKeyReleased

    private void loginButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_loginButtonKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            loginButtonActionPerformedEnterKey(evt);
            evt.consume();

        }

    }//GEN-LAST:event_loginButtonKeyPressed

    private void registerLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_registerLabelMousePressed
        // TODO add your handling code here:
        if (evt.getClickCount() == 1) {
            this.setEnabled(false);
        }

        registerFrame = new JFrame();
        registerFrame.setSize(700, 700);
        registerFrame.setVisible(true);
        RegisterPanel panel = new RegisterPanel();
        registerFrame.getContentPane().add(panel);



    }//GEN-LAST:event_registerLabelMousePressed

    private void userNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userNameFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainFrame().setVisible(true);

            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel alertPasswordLabel;
    private javax.swing.JLabel alertUserNameLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton loginButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel registerLabel;
    public javax.swing.JTextField userNameField;
    // End of variables declaration//GEN-END:variables

    // End of variables declaration
    boolean isClientConnected(InetAddress address, int serverPort) {

        userName = userNameField.getText();
        password = new String(passwordField.getPassword());
        InetAddress serverName = address;
        try {

            client = new Socket(serverName, serverPort);

            System.out.println("Connecting to " + serverName + " on port " + serverPort);
            System.out.println("Just connected to " + client.getRemoteSocketAddress());


           out = new DataOutputStream(client.getOutputStream());
           // out = new ObjectOutputStream(client.getOutputStream());


           in = new DataInputStream(client.getInputStream());
            //in = new ObjectInputStream(client.getInputStream());

            return true;
        } catch (IOException e) {
            return false;
        }
    }

    public void readFromSocket() {

        Runnable run2 = new Runnable() {//for reading from socket

            boolean stop = false;

            public void run() {

               while (!stop) {

                    try {

                        buf = new byte[4096];
                        actualNumberOfBytesRead = client.getInputStream().read(buf);
                        dataString = new String(buf, 0, actualNumberOfBytesRead);

                        System.out.println("Data is " + dataString);
                       // InputParser ip = new InputParser();
                        IP  ipp = new IP();
                        ipp.ParseInput(dataString);
                       // ip.parse(dataString);
                        

                        if(home==1 && IP.header[0].equalsIgnoreCase("msg")||dataString.contains("Joined") )
                        {
                            String message = IP.message;
                            HomePanel.jTextArea1.append(message);
                        }


//                        if (HomePanel.globalvar == 1 && IP.header[0].equalsIgnoreCase("msg") || dataString.contains("quit") || (HomePanel.globalvar == 1 && dataString.contains("Joined")))
//                        {
//                             String message = IP.message;
//                             PrivateChat.displayTextArea.append(message + "\n");
//
//                        }
                        //if the chatpanel is not opened data cannot be written and exception will occur


                    } catch (IOException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }


                }

            }
        };

        Thread t = new Thread(run2);
        t.start();
    }

    public static boolean isUserNameValid(String name) {

        boolean isValid = false;



        String expression = "^[a-zA-Z0-9.-]{2,20}$";
        CharSequence inputStr = name;
        Pattern pattern = Pattern.compile(expression, Pattern.CASE_INSENSITIVE);
        Matcher matcher = pattern.matcher(inputStr);
        if (matcher.matches()) {
            isValid = true;
        }
        return isValid;
    }

    public static boolean isPasswordValid(String name) {

        boolean isValid = false;


        String expression = "((?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,})";
        CharSequence inputStr = name;
        Pattern pattern = Pattern.compile(expression, Pattern.CASE_INSENSITIVE);
        Matcher matcher = pattern.matcher(inputStr);
        if (matcher.matches()) {
            isValid = true;
        }
        return isValid;
    }

    private void validUserName() {
        userName = userNameField.getText();
        isUserNameValid(userName);
        if (isUserNameValid(userName) == true) {
            ImageIcon icon = new ImageIcon("images/correctIcon.png");
            alertUserNameLabel.setIcon(icon);
        }
        if (isUserNameValid(userName) != true) {
            if (userName.equals("")) {
                ImageIcon icon = new ImageIcon("images/wrongIcon.png");
                alertUserNameLabel.setIcon(icon);

            } else {
                ImageIcon icon = new ImageIcon("images/wrongIcon.png");
                alertUserNameLabel.setIcon(icon);
            }
        }

    }

    private void validPassword() {
        password = new String(passwordField.getPassword());
        if (isPasswordValid(password) == true) {
            ImageIcon icon = new ImageIcon("images/correctIcon.png");
            alertPasswordLabel.setIcon(icon);
        }
        if (isPasswordValid(password) != true) {
            if (password.equals("")) {
                ImageIcon icon = new ImageIcon("images/wrongIcon.png");
                alertPasswordLabel.setIcon(icon);

            } else {
                ImageIcon icon = new ImageIcon("images/wrongIcon.png");
                alertPasswordLabel.setIcon(icon);
            }

        }



    }

    public static boolean isNumeric(String str) {
        try {
            int d = Integer.parseInt(str);
        } catch (NumberFormatException nfe) {
            return false;
        }
        return true;
    }

    private void loginButtonActionPerformedEnterKey(KeyEvent evt) {
        validUserName();
        validPassword();
        try {
            // TODO add your handling code here:
            userName = userNameField.getText();
            password = new String(passwordField.getPassword());
            address = InetAddress.getByName("localhost");
            //serverPort = 4092;
            if (isUserNameValid(userName) == true && isPasswordValid(password) == true) {
                if (isClientConnected(address, serverPort) == true) {
                    out.writeUTF(userName + " " + password);
                    out.flush();
                    mainPanel.removeAll();
                    JPanel panel = new JPanel();
                    panel.setSize(700, 700);
                    panel.setVisible(true);
                    HomePanel hp = new HomePanel(userName);
                    FlowLayout fl = new FlowLayout();
                    fl.setHgap(0);
                    fl.setVgap(0);
                    panel.add(hp);
                    fl.setAlignment(FlowLayout.LEFT);
                    mainPanel.setLayout(fl);
                    mainPanel.add(panel, BorderLayout.SOUTH);
                    mainPanel.revalidate();
                }
            }

        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void setOne() {
        home=1;
    }
}
