/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseListener;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/**
 *
 * @author suresh
 */
public class ChatPanel extends JPanel {

    File file;
    String inputText;
    JPopupMenu popUpMenu;
    JMenuItem sendPhotoMenuItem, item2;
    MainFrame mf;
    String photoFileName;
    String choosertitle;
    JFileChooser fileChooser;
    int pane;

    /**
     * Creates new form ChatPanel
     */
    public ChatPanel() throws IOException {

        initComponents();
        editLine();
        displayMenu();







    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        displayTextAreaScrollPane = new javax.swing.JScrollPane();
        displayTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        inputTextArea = new javax.swing.JTextArea();
        profileLabel = new javax.swing.JLabel();
        sendButton = new javax.swing.JButton();
        menuPanel = new javax.swing.JPanel();

        displayTextAreaScrollPane.setAutoscrolls(true);

        displayTextArea.setColumns(20);
        displayTextArea.setEditable(false);
        displayTextArea.setRows(5);
        displayTextAreaScrollPane.setViewportView(displayTextArea);
        displayTextArea.getAccessibleContext().setAccessibleName("");

        inputTextArea.setColumns(20);
        inputTextArea.setRows(5);
        inputTextArea.setText("hyellomc");
        inputTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inputTextAreaKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(inputTextArea);

        profileLabel.setText("Avatar +Profile");
        profileLabel.setBorder(javax.swing.BorderFactory.createCompoundBorder());

        sendButton.setText("Send");
        sendButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                sendButtonMouseEntered(evt);
            }
        });
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout menuPanelLayout = new javax.swing.GroupLayout(menuPanel);
        menuPanel.setLayout(menuPanelLayout);
        menuPanelLayout.setHorizontalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 388, Short.MAX_VALUE)
        );
        menuPanelLayout.setVerticalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(displayTextAreaScrollPane, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(menuPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(profileLabel))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(menuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(displayTextAreaScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(profileLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        // TODO add your handling code here:

        sendText();


    }//GEN-LAST:event_sendButtonActionPerformed

    private void sendButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sendButtonMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_sendButtonMouseEntered

    private void inputTextAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputTextAreaKeyPressed
        // On Enter Key, message is sent
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            sendText();
            evt.consume();

        }
    }//GEN-LAST:event_inputTextAreaKeyPressed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JTextArea displayTextArea;
    private javax.swing.JScrollPane displayTextAreaScrollPane;
    private javax.swing.JTextArea inputTextArea;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel menuPanel;
    private javax.swing.JLabel profileLabel;
    private javax.swing.JButton sendButton;
    // End of variables declaration//GEN-END:variables

    public void sendText() {
        if (inputTextArea.getText().equals("")) {
            JOptionPane.showMessageDialog(popUpMenu, "Please write something...");
        } else {

            try {

                MainFrame.out.writeUTF(inputTextArea.getText());
                MainFrame.out.flush();
                inputTextArea.setText("");
            } catch (IOException ex) {
                Logger.getLogger(ChatPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }


    }

    public void sendPhoto(File file) {
        if (file != null) {
            try {
                System.out.println("File is not null");

//
//                MainFrame mof = new MainFrame();
//                FileInputStream fi = new FileInputStream(file);
//                byte byt = mof.buf[fi.available()];
//                MainFrame.out.write(byt);
//                MainFrame.out.flush();
                System.out.println("file is sent");


            } catch (Exception e) {
            }
        }

    }

    public void editLine() {

        displayTextArea.setLineWrap(true);
        inputTextArea.setLineWrap(true);
        inputTextArea.setWrapStyleWord(false);

        displayTextArea.setWrapStyleWord(false);
        displayTextAreaScrollPane.setWheelScrollingEnabled(true);
        displayTextAreaScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);





    }

    public void displayMenu() {
        FlowLayout flowLaout = new FlowLayout();
        menuPanel.setLayout(flowLaout);
        flowLaout.setVgap(0);
        flowLaout.setAlignment(FlowLayout.LEFT);

        JMenuBar menuBar = new JMenuBar();

        JMenu conversationMenu = new JMenu("Conversation");
        JMenu editMenu = new JMenu("Edit");
        JMenu actionMenu = new JMenu("Action");
        JMenu optionMenu = new JMenu("Option");
        JMenu helpMenu = new JMenu("Help");

        JMenuItem soundEnableMenuItem = new JMenuItem("Enable Sound");
        JMenuItem logginEnableMenuItem = new JMenuItem("Enable Logging");
        JMenuItem enableToolbar = new JMenuItem("Enable Toolbar");

        JMenuItem getAttentionMenuItem = new JMenuItem("Get Attention");
        JMenuItem saveLogMenuItem = new JMenuItem("Save log");
        JMenuItem getInfoMenuItem = new JMenuItem("Get Info");
        JMenuItem exitMenuItem = new JMenuItem("Exit");


        JMenuItem copyEditMenuItem = new JMenuItem("Copy");
        JMenuItem cutEditMenuItem = new JMenuItem("Cut");
        JMenuItem findMenuItem = new JMenuItem("Find");

        JMenuItem voiceCallMenuItem = new JMenuItem("Make Voice Call");
        JMenuItem videoCallMenuItem = new JMenuItem("Make video Call");
        JMenuItem imageMenuItem = new JMenuItem("Send Image");
        JMenuItem fileMenuItem = new JMenuItem("Send File");

        JMenuItem helpMenuItem = new JMenuItem("Help Contents");
        JMenuItem aboutMenuItem = new JMenuItem("About");
        JMenuItem creditMenuItem = new JMenuItem("Credit");



        menuPanel.add(menuBar);

        menuBar.add(conversationMenu);
        menuBar.add(editMenu);
        menuBar.add(actionMenu);
        menuBar.add(optionMenu);
        menuBar.add(helpMenu);


        optionMenu.add(soundEnableMenuItem);
        optionMenu.add(logginEnableMenuItem);
        optionMenu.add(enableToolbar);

        conversationMenu.add(getAttentionMenuItem);
        conversationMenu.add(saveLogMenuItem);
        conversationMenu.add(getInfoMenuItem);
        conversationMenu.add(exitMenuItem);

        editMenu.add(copyEditMenuItem);
        editMenu.add(cutEditMenuItem);
        editMenu.add(findMenuItem);

        actionMenu.add(voiceCallMenuItem);
        actionMenu.add(videoCallMenuItem);
        actionMenu.add(imageMenuItem);
        actionMenu.add(fileMenuItem);

        helpMenu.add(helpMenuItem);
        helpMenu.add(aboutMenuItem);
        helpMenu.add(creditMenuItem);

        helpMenuItem.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent ae) {
               
                JFrame helpContentFrame=new JFrame();
                helpContentFrame.setVisible(true);
                helpContentFrame.setSize(603, 365);
                HelpContents hc=new HelpContents();
                helpContentFrame.getContentPane().add(hc);
            }
        });


        creditMenuItem.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent ae) {
                JTextArea messageTextArea = new JTextArea(10, 25);
                messageTextArea.setOpaque(false);
                messageTextArea.setEditable(false);
                messageTextArea.setText("Surehs Lamgard (@rockrulzz47)" + "\n" + "Diapk Panta (@nimbusXnimbus)" + "\n" + "Raju Gotame (@munnaraju)");
                final ImageIcon icon = new ImageIcon("images/about5.png");
                JOptionPane.showMessageDialog(null, messageTextArea, "About", JOptionPane.INFORMATION_MESSAGE, icon);



            }
        });


        exitMenuItem.addMouseListener(new MouseListener() {

            public void mouseClicked(java.awt.event.MouseEvent me) {
            }

            public void mousePressed(java.awt.event.MouseEvent me) {
                Window win = SwingUtilities.getWindowAncestor((Component) me.getSource());
                win.dispose();
            }

            public void mouseReleased(java.awt.event.MouseEvent me) {
            }

            public void mouseEntered(java.awt.event.MouseEvent me) {
            }

            public void mouseExited(java.awt.event.MouseEvent me) {
            }
        });

        aboutMenuItem.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent ae) {
                JTextArea messageTextArea = new JTextArea(10, 25);
                messageTextArea.setOpaque(false);
                messageTextArea.setEditable(false);
                messageTextArea.setText("Hello" + "\n" + "How r u ?" + "\n" + "my name is raju" + "\n" + "I live in chitwan");
                final ImageIcon icon = new ImageIcon("images/about5.png");
                JOptionPane.showMessageDialog(null, messageTextArea, "About", JOptionPane.INFORMATION_MESSAGE, icon);



            }
        });



        saveLogMenuItem.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent ae) {
                System.out.println("save log is clicked");
                String messageString = displayTextArea.getText();
                System.out.println(messageString);

                final JFileChooser fc = new JFileChooser();

                int returnVal = fc.showSaveDialog(ChatPanel.this);
                File file = fc.getSelectedFile();
                fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
                fc.setAcceptAllFileFilterUsed(false);
                fc.setDialogTitle("Click Save to to save your file");
                fc.addChoosableFileFilter(new TxtSaveFilter());
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    String EXT = "";

                    String Extension = fc.getFileFilter().getDescription();

                    if (Extension.equals("*.txt,*.TXT")) {
                        EXT = ".txt";
                    }

                    try {

                        // if OK write the file

                        BufferedWriter output = new BufferedWriter(new FileWriter(file.getPath() + file.getName()));

                        output.write(messageString);


                        output.close();


                    } catch (IOException ex) {

                        ex.printStackTrace();
                    }
                } else {

                    /*
                     * cancel
                     */
                    return;

                }

            }
        });

        imageMenuItem.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent ae) {


                fileChooser = new JFileChooser();
                fileChooser.setDialogTitle(choosertitle);
                fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                fileChooser.setMultiSelectionEnabled(false);
                fileChooser.setAcceptAllFileFilterUsed(true);
                javax.swing.filechooser.FileFilter fileFormatFilter = new javax.swing.filechooser.FileFilter() {

                    @Override
                    public boolean accept(File file) {
                        photoFileName = file.getName();
                        return photoFileName.endsWith(".jpg");


                    }

                    @Override
                    public String getDescription() {
                        return "*.jpg";
                    }
                };

                fileChooser.addChoosableFileFilter(fileFormatFilter);

                if (fileChooser.showOpenDialog(popUpMenu) == JFileChooser.APPROVE_OPTION) {

                    System.out.println(fileChooser.getSelectedFile());
                    file = fileChooser.getSelectedFile();
                    sendPhoto(file);



                } else {
                    System.out.println("No Selection ");
                }

            }
        });

    }
}
